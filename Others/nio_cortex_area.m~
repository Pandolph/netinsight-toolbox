% nio_cortex_area
% Determine cortex area for particular cortex field(barrel cortex, motor
% cortex, etc.).
% 
% [ Z_ST Z_EN vol ] = nio_cortex_area( BM, SegImg, voxel_size, options, ratio )
% -----------------------------------------------------------------
% 
% Determine cortex area based on a cortex template which is generated by manual
% segmentation from raw image. The template actually is a image stack, its
% represented-size is same to swc file's data. Elements in template can be zero or
% nonzero, which labels inside cortex and outside cortex, respectively.
% The process is a loop which traverses every block, returns starting
% depth and ending depth for cortex area within a single block.
% 
% Input
% -----
% - BM:: cell array, binary images marking rectangle block or one
%        barrel field
% - SegImg:: the path of a cortex template
% - voxel_size:: the voxel size of cortex template
% - options:: string, it can be empty by default.
%        '-v' : output the cortex volume for particular cortex field, unit:
%        ��m^3
% - ratio:: threshold for boundary of the cortex, represents the ratio that
%           number of voxels insides cortex(element value that equals to 
%           zero) and number of all voxels in a single block. {DEFAULT: 0.5}
% 
% Output
% ------
% - Z_ST:: linear array, representing the starting depth(z-coordinates) of 
%          real cortex in all blocks. unit: ��m
% - Z_EN:: linear array, representing the ending depth(z-coordinates) of 
%          real cortex in all blocks. unit: ��m
% - vol:: the cortex volume for particular cortex field, unit: ��m^3
% 
% Example
% -------
% [ Z_ST Z_EN ] = nio_cortex_area( BM, 'template.tif', 2, '-v' );

function [ Z_ST Z_EN varargout ] = nio_cortex_area( BM, SegImg, voxel_size, options, varargin )
%% read label field
info = imfinfo(SegImg);
Ml = info(1).Height;
Nl = info(1).Width;
Kl = length( info );
%% load the stack
v_label = zeros( Ml, Nl, Kl, 'uint8' );

for k = 1 : Kl
    v_label( :, :, k ) = imread( SegImg, k );
end
%%
if ~isempty(options)&&~ischar(options)
    varargin{1} = options;
    options = [];
end
%% parameters
if(isempty(varargin))
    ratio = 0.5; % threshold for boundary of the cortex.
else
    ratio = varargin{1};
end

num_block = length(BM);
area = zeros(1, num_block);
idx_x = cell(1, num_block);
idx_y = cell(1, num_block);
Z_ST = zeros(1, num_block); % z-value , starting point of cortex
Z_EN = zeros(1, num_block); % z-value , ending point of cortex
ze_pix = cell(1, num_block);
%% resize the mask
for ward = 1 : len
%% save image index and size of every blocks
for i = 1 : n_i
    for j = 1 : n_j
        idx = n_j * ( i - 1 ) + j;
        [idx_x{idx}, idx_y{idx}] = find(BM{idx} == 1);
        area(idx) = length(find(BM{idx} == 1));
    end
end
%% find the z_st and z_en for every block
for k = 1 : size(v_label, 3)
    im = v_label(:, :, k);
    [im_zero_x, im_zero_y] = find(im == 0);
    for ward = 1 : num_block
        if ~Z_ST(ward)
            [~, ze_pix{ward}, ~] = intersect([im_zero_x im_zero_y], [idx_x{ward} idx_y{ward}], 'rows'); % get the intersection of index
            if length(ze_pix{ward}) / area(ward) >= ratio
                Z_ST(ward) = k;
            end
        end
    end
    if all(Z_ST, 2) % search finished
        break;
    end
end

for k = size(v_label, 3) : (-1) : 1
    im = v_label(:, :, k);
    [im_zero_x, im_zero_y] = find(im == 0);
    for ward = 1 : num_block
        if ~Z_EN(ward)
            [~, ze_pix{ward}, ~] = intersect([im_zero_x im_zero_y], [idx_x{ward} idx_y{ward}], 'rows'); % get the intersection of index
            if length(ze_pix{ward}) / area(ward) >= ratio
                Z_EN(ward) = k;
            end
        end
    end
    if all(Z_EN, 2) % search finished
        break;
    end
end
%% the volumn of cortex
if ~isempty(options)&&strfind (options, '-v')
vol = 0;
for ward = 1 : num_block
    vol = vol + area(ward) * (Z_EN(ward) - Z_ST(ward)); % unit : ��m
end
if (nargout > 2)
    varargout{3} = vol;
end
end
end
